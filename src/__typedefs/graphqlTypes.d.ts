/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

export { };

declare global {
  namespace GQL {
    /*******************************
     *                             *
     *          TYPE DEFS          *
     *                             *
     *******************************/
    export interface Query {
      _empty?: string;
      
      /**
       *  list all writers 
       */
      writerList?: Array<Writer | null>;
      
      /**
       *  find a writer by id 
       */
      writerFindById?: Writer;
      
      /**
       *  list all books 
       */
      bookList?: Array<Book | null>;
      
      /**
       *  find a book by id 
       */
      bookFindById?: Book;
      
      /**
       *  find books by writer id 
       */
      bookListByWriterId?: Array<Book | null>;
    }
    
    /**
     *  a writer definition 
     */
    export interface Writer {
      id?: string;
      name?: string;
      
      /**
       *  when the writer was born 
       */
      birthDay?: string;
      
      /**
       *  the country that the writer lives in 
       */
      country?: CountryEnum;
      
      /**
       *  a list of published books 
       */
      books?: Array<Book | null>;
    }
    
    export type CountryEnum =
    'US' |
    'BL' |
    'MX' |
    'CH' |
    'UK' |
    'RU' |
    'IL' |
    'NL' |
    'JP';
    // NOTE: enum CountryEnum is generate as string union instead of string enum because the types is generated under global scope
    
    /**
     *  a book definition 
     */
    export interface Book {
      id?: string;
      writerId?: string;
      name?: string;
      writer?: Writer;
      description?: string;
      score?: number;
      votes?: number;
    }
    
    export interface Mutation {
      _empty?: string;
      
      /**
       *  create a new writer 
       */
      writerCreate?: Writer;
      
      /**
       *  create a new book 
       */
      bookCreate?: Book;
      
      /**
       *  change book description 
       */
      bookRedescribe?: Book;
      
      /**
       *  vote book 
       */
      bookVote?: Book;
    }
    
    /**
     *  used for creating a new writer by mutation 
     */
    export interface WriterCreateInput {
      name?: string;
      birthDay?: string;
      country?: CountryEnum;
    }
    
    /**
     *  used for creating a new book by mutation 
     */
    export interface BookCreateInput {
      name: string;
      
      /**
       *  The id of the writer who wrote the book 
       */
      writerId: string;
      description?: string;
    }
    
    /**
     *  used for redescribing a book by mutation 
     */
    export interface BookRedescribeInput {
      id: string;
      description: string;
    }
    
    /**
     *  used for redescribing a book by mutation 
     */
    export interface BookVoteInput {
      id: string;
      score: ScalarValidStarsVote;
    }
    
    /**
     * A stars vote between 0 and 5
     */
    export type ScalarValidStarsVote = any;
    
    export interface Subscription {
      _empty?: string;
      
      /**
       *  called when a new writer is created 
       */
      writerCreated?: Writer;
      
      /**
       *  called whenever mutation is applied to an existing book 
       */
      bookUpdated?: BookUpdateSubscription;
      
      /**
       *  called when a new book is added 
       */
      bookCreated?: Book;
    }
    
    /**
     *  The return value for book updates 
     */
    export interface BookUpdateSubscription {
      id?: string;
      book?: Book;
      
      /**
       *  the type of mutation that happend to the book 
       */
      mutation?: string;
    }
    
    /*********************************
     *                               *
     *         TYPE RESOLVERS        *
     *                               *
     *********************************/
    /**
     * This interface define the shape of your resolver
     * Note that this type is designed to be compatible with graphql-tools resolvers
     * However, you can still use other generated interfaces to make your resolver type-safed
     */
    export interface Resolver {
      Query?: QueryTypeResolver;
      Writer?: WriterTypeResolver;
      Book?: BookTypeResolver;
      Mutation?: MutationTypeResolver;
      ScalarValidStarsVote?: GraphQLScalarType;
      Subscription?: SubscriptionTypeResolver;
      BookUpdateSubscription?: BookUpdateSubscriptionTypeResolver;
    }
    export interface QueryTypeResolver<TParent = any> {
      _empty?: QueryTo_emptyResolver<TParent>;
      writerList?: QueryToWriterListResolver<TParent>;
      writerFindById?: QueryToWriterFindByIdResolver<TParent>;
      bookList?: QueryToBookListResolver<TParent>;
      bookFindById?: QueryToBookFindByIdResolver<TParent>;
      bookListByWriterId?: QueryToBookListByWriterIdResolver<TParent>;
    }
    
    export interface QueryTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToWriterListResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToWriterFindByIdArgs {
      id: string;
    }
    export interface QueryToWriterFindByIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToWriterFindByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToBookListResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToBookFindByIdArgs {
      id: string;
    }
    export interface QueryToBookFindByIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToBookFindByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToBookListByWriterIdArgs {
      writerId: string;
    }
    export interface QueryToBookListByWriterIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToBookListByWriterIdArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface WriterTypeResolver<TParent = any> {
      id?: WriterToIdResolver<TParent>;
      name?: WriterToNameResolver<TParent>;
      birthDay?: WriterToBirthDayResolver<TParent>;
      country?: WriterToCountryResolver<TParent>;
      books?: WriterToBooksResolver<TParent>;
    }
    
    export interface WriterToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface WriterToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface WriterToBirthDayResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface WriterToCountryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface WriterToBooksResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BookTypeResolver<TParent = any> {
      id?: BookToIdResolver<TParent>;
      writerId?: BookToWriterIdResolver<TParent>;
      name?: BookToNameResolver<TParent>;
      writer?: BookToWriterResolver<TParent>;
      description?: BookToDescriptionResolver<TParent>;
      score?: BookToScoreResolver<TParent>;
      votes?: BookToVotesResolver<TParent>;
    }
    
    export interface BookToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BookToWriterIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BookToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BookToWriterResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BookToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BookToScoreResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BookToVotesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationTypeResolver<TParent = any> {
      _empty?: MutationTo_emptyResolver<TParent>;
      writerCreate?: MutationToWriterCreateResolver<TParent>;
      bookCreate?: MutationToBookCreateResolver<TParent>;
      bookRedescribe?: MutationToBookRedescribeResolver<TParent>;
      bookVote?: MutationToBookVoteResolver<TParent>;
    }
    
    export interface MutationTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToWriterCreateArgs {
      input: WriterCreateInput;
    }
    export interface MutationToWriterCreateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToWriterCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToBookCreateArgs {
      input: BookCreateInput;
    }
    export interface MutationToBookCreateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToBookCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToBookRedescribeArgs {
      input: BookRedescribeInput;
    }
    export interface MutationToBookRedescribeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToBookRedescribeArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToBookVoteArgs {
      input: BookVoteInput;
    }
    export interface MutationToBookVoteResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToBookVoteArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubscriptionTypeResolver<TParent = any> {
      _empty?: SubscriptionTo_emptyResolver<TParent>;
      writerCreated?: SubscriptionToWriterCreatedResolver<TParent>;
      bookUpdated?: SubscriptionToBookUpdatedResolver<TParent>;
      bookCreated?: SubscriptionToBookCreatedResolver<TParent>;
    }
    
    export interface SubscriptionTo_emptyResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface SubscriptionToWriterCreatedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface SubscriptionToBookUpdatedArgs {
      bookId: string;
    }
    export interface SubscriptionToBookUpdatedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: SubscriptionToBookUpdatedArgs, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: SubscriptionToBookUpdatedArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface SubscriptionToBookCreatedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface BookUpdateSubscriptionTypeResolver<TParent = any> {
      id?: BookUpdateSubscriptionToIdResolver<TParent>;
      book?: BookUpdateSubscriptionToBookResolver<TParent>;
      mutation?: BookUpdateSubscriptionToMutationResolver<TParent>;
    }
    
    export interface BookUpdateSubscriptionToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BookUpdateSubscriptionToBookResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface BookUpdateSubscriptionToMutationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
  }
}