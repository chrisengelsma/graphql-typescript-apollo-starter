/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

export { };

declare global {
  namespace GQL {
    /*******************************
     *                             *
     *          TYPE DEFS          *
     *                             *
     *******************************/
    export interface GQLQuery {
      _empty?: string;
      
      /**
       *  list all writers 
       */
      writerList?: Array<GQLWriter | null>;
      
      /**
       *  find a writer by id 
       */
      writerFindById?: GQLWriter;
      
      /**
       *  list all books 
       */
      bookList?: Array<GQLBook | null>;
      
      /**
       *  find a book by id 
       */
      bookFindById?: GQLBook;
      
      /**
       *  find books by writer id 
       */
      bookListByWriterId?: Array<GQLBook | null>;
    }
    
    export interface GQLWriter {
      id?: string;
      name?: string;
      birthDay?: string;
      country?: GQLCountryEnum;
      books?: Array<GQLBook | null>;
    }
    
    export type GQLCountryEnum = 'US' | 'BL' | 'MX' | 'CH' | 'UK' | 'RU';
    // NOTE: enum CountryEnum is generate as string union instead of string enum because the types is generated under global scope
    
    export interface GQLBook {
      id?: string;
      writerId?: string;
      name?: string;
      writer?: GQLWriter;
      description?: string;
      score?: number;
      votes?: number;
    }
    
    export interface GQLMutation {
      _empty?: string;
      
      /**
       *  create a new writer 
       */
      writerCreate?: GQLWriter;
      
      /**
       *  create a new book 
       */
      bookCreate?: GQLBook;
      
      /**
       *  change book description 
       */
      bookRedescribe?: GQLBook;
      
      /**
       *  vote book 
       */
      bookVote?: GQLBook;
    }
    
    /**
     *  used for creating a new writer by mutation 
     */
    export interface GQLWriterCreateInput {
      name?: string;
      birthDay?: string;
      country?: GQLCountryEnum;
    }
    
    /**
     *  used for creating a new book by mutation 
     */
    export interface GQLBookCreateInput {
      name: string;
      
      /**
       *  The id of the writer who wrote the book 
       */
      writerId: string;
      description?: string;
    }
    
    /**
     *  used for redescribing a book by mutation 
     */
    export interface GQLBookRedescribeInput {
      id: string;
      description: string;
    }
    
    /**
     *  used for redescribing a book by mutation 
     */
    export interface GQLBookVoteInput {
      id: string;
      score: GQLScalarValidStarsVote;
    }
    
    /**
     * A stars vote between 0 and 5
     */
    export type GQLScalarValidStarsVote = any;
    
    export interface GQLSubscription {
      _empty?: string;
      
      /**
       *  called when a new writer is created 
       */
      writerCreated?: GQLWriter;
      
      /**
       *  called whenever mutation is applied to an existing book 
       */
      bookUpdated?: GQLBookUpdateSubscription;
      
      /**
       *  called when a new book is added 
       */
      bookCreated?: GQLBook;
    }
    
    export interface GQLBookUpdateSubscription {
      id?: string;
      book?: GQLBook;
      mutation?: string;
    }
    
    /*********************************
     *                               *
     *         TYPE RESOLVERS        *
     *                               *
     *********************************/
    /**
     * This interface define the shape of your resolver
     * Note that this type is designed to be compatible with graphql-tools resolvers
     * However, you can still use other generated interfaces to make your resolver type-safed
     */
    export interface GQLResolver {
      Query?: GQLQueryTypeResolver;
      Writer?: GQLWriterTypeResolver;
      Book?: GQLBookTypeResolver;
      Mutation?: GQLMutationTypeResolver;
      ScalarValidStarsVote?: GraphQLScalarType;
      Subscription?: GQLSubscriptionTypeResolver;
      BookUpdateSubscription?: GQLBookUpdateSubscriptionTypeResolver;
    }
    export interface GQLQueryTypeResolver<TParent = any> {
      _empty?: QueryTo_emptyResolver<TParent>;
      writerList?: QueryToWriterListResolver<TParent>;
      writerFindById?: QueryToWriterFindByIdResolver<TParent>;
      bookList?: QueryToBookListResolver<TParent>;
      bookFindById?: QueryToBookFindByIdResolver<TParent>;
      bookListByWriterId?: QueryToBookListByWriterIdResolver<TParent>;
    }
    
    export interface QueryTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface QueryToWriterListResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface QueryToWriterFindByIdArgs {
      id: string;
    }
    export interface QueryToWriterFindByIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToWriterFindByIdArgs, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface QueryToBookListResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface QueryToBookFindByIdArgs {
      id: string;
    }
    export interface QueryToBookFindByIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToBookFindByIdArgs, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface QueryToBookListByWriterIdArgs {
      writerId: string;
    }
    export interface QueryToBookListByWriterIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToBookListByWriterIdArgs, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface GQLWriterTypeResolver<TParent = any> {
      id?: WriterToIdResolver<TParent>;
      name?: WriterToNameResolver<TParent>;
      birthDay?: WriterToBirthDayResolver<TParent>;
      country?: WriterToCountryResolver<TParent>;
      books?: WriterToBooksResolver<TParent>;
    }
    
    export interface WriterToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface WriterToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface WriterToBirthDayResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface WriterToCountryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface WriterToBooksResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface GQLBookTypeResolver<TParent = any> {
      id?: BookToIdResolver<TParent>;
      writerId?: BookToWriterIdResolver<TParent>;
      name?: BookToNameResolver<TParent>;
      writer?: BookToWriterResolver<TParent>;
      description?: BookToDescriptionResolver<TParent>;
      score?: BookToScoreResolver<TParent>;
      votes?: BookToVotesResolver<TParent>;
    }
    
    export interface BookToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface BookToWriterIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface BookToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface BookToWriterResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface BookToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface BookToScoreResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface BookToVotesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface GQLMutationTypeResolver<TParent = any> {
      _empty?: MutationTo_emptyResolver<TParent>;
      writerCreate?: MutationToWriterCreateResolver<TParent>;
      bookCreate?: MutationToBookCreateResolver<TParent>;
      bookRedescribe?: MutationToBookRedescribeResolver<TParent>;
      bookVote?: MutationToBookVoteResolver<TParent>;
    }
    
    export interface MutationTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface MutationToWriterCreateArgs {
      input: GQLWriterCreateInput;
    }
    export interface MutationToWriterCreateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToWriterCreateArgs, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface MutationToBookCreateArgs {
      input: GQLBookCreateInput;
    }
    export interface MutationToBookCreateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToBookCreateArgs, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface MutationToBookRedescribeArgs {
      input: GQLBookRedescribeInput;
    }
    export interface MutationToBookRedescribeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToBookRedescribeArgs, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface MutationToBookVoteArgs {
      input: GQLBookVoteInput;
    }
    export interface MutationToBookVoteResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToBookVoteArgs, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface GQLSubscriptionTypeResolver<TParent = any> {
      _empty?: SubscriptionTo_emptyResolver<TParent>;
      writerCreated?: SubscriptionToWriterCreatedResolver<TParent>;
      bookUpdated?: SubscriptionToBookUpdatedResolver<TParent>;
      bookCreated?: SubscriptionToBookCreatedResolver<TParent>;
    }
    
    export interface SubscriptionTo_emptyResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
    }
    
    export interface SubscriptionToWriterCreatedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
    }
    
    export interface SubscriptionToBookUpdatedArgs {
      bookId: string;
    }
    export interface SubscriptionToBookUpdatedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: SubscriptionToBookUpdatedArgs, context: any, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
      subscribe: (parent: TParent, args: SubscriptionToBookUpdatedArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
    }
    
    export interface SubscriptionToBookCreatedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
    }
    
    export interface GQLBookUpdateSubscriptionTypeResolver<TParent = any> {
      id?: BookUpdateSubscriptionToIdResolver<TParent>;
      book?: BookUpdateSubscriptionToBookResolver<TParent>;
      mutation?: BookUpdateSubscriptionToMutationResolver<TParent>;
    }
    
    export interface BookUpdateSubscriptionToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface BookUpdateSubscriptionToBookResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
    export interface BookUpdateSubscriptionToMutationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
    }
    
  }
}